API documentation


IMPORTANT - Deleting a project, will NOT delete the nested areas, levels, and points. That is extra functionality not yet implemented.
## UTILITY

GET /api/all - returns entire DB of projects, fully expanded


## PROJECT
GET /api/project/<optional ID for specific>
POST /api/project?id=<optional>&name=<required string>
PATCH /api/project/<projectID>?name=<string>
DELETE /api/project/<projectID>

## AREA

GET /api/project/<projectID>/area/<optional ID for specific>
POST /api/project/<projectID>/area?id=<optional>&name=<required>
PATCH /api/project/<projectID>/area/<areaID>?name=<string>
DELETE /api/project/<projectID>/area/<areaID>

## LEVEL

GET /api/project/<projectID>/area/<areaID>/level/<optional ID for specific>
POST /api/project/<projectID>/area/<areaID>/level?id=<optional>&id=<optional objectid>&name=<required string>&image_scale=<default 1 number>&local_directory=<default ./images string>&filename=<optional default '' string>
PATCH /api/project/<projectID>/area/<areaID>/level/<levelID>?name=<required string>&scale=<number>&local_directory=<string>&image.filename=<optional string> //note: test if image.filename works on image object - updates by just feeding query params as an object
DELETE /api/project/<projectID>/area/<areaID>/level/<levelID>

## IMAGES - Please note, if level=<uuid> is found to be invalid, the image will be saved to folder regardless & local_directory must EXIST
*If no id is provided, will just save file with defaults (./images & original filename)*
POST /api/upload/panorama?id=<required valid ObjectId>&filename=<optional string>&north=<percent default 0.5 number>&local_directory=<'./<dirname>' - default ./images>
POST /api/upload/floorplan?id=<required valid ObjectId>&filename=<optional string>&scale=<default 1 number>&local_directory=<'./<dirname> - default './images'>

##--- Room and Point are referenced by LEVEL ---#
## Room

GET /api/project/<projectID>/area/<areaID>/level/<levelID>/room/<optional ID for specific>
POST /api/project/<projectID>/area/<areaID>/level/<levelID>/room?id=<optional>&name=<required string>&owner=<default '' string>
PATCH /api/project/<projectID>/area/<areaID>/level/<levelID>/room/<roomID>?name=<string>&owner=<string>
DELETE /api/project/<projectID>/area/<areaID>/level/<levelID>/room/<roomID>

## Point

GET /api/project/<projectID>/area/<areaID>/level/<levelID>/point/<optional ID for specific>
POST /api/project/<projectID>/area/<areaID>/level/<levelID>/point?id=<optional>&name=<required string>&x=<required number>&y=<required number>
PATCH /api/project/<projectID>/area/<areaID>/level/<levelID>/point/<pointID>?name=<string>&x=<number>&y=<number>
DELETE /api/project/<projectID>/area/<areaID>/level/<levelID>/point/<pointID>

## Linking a point to a ROOM or a POINT - Append /link to end of .../room/<roomID> or .../point/<pointID>

GET .../link/<optional ID for specific>
POST .../link/<pointID>
PATCH .../link/<current pointID>?id=<new pointID>
DELETE .../link/<pointID>
*Please note, the pointID must exist to be added - I have used 'pointID' to make it clear a link is an actual POINT object somewhere*


*I have done basic testing at the capacity I can with little data, but I am sure you will discover more bugs*
